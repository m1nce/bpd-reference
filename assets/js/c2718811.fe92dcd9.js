"use strict";(self.webpackChunkbpd_reference=self.webpackChunkbpd_reference||[]).push([[7206],{6464:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(4848),r=t(8453),s=t(8597);const o={sidebar_position:7},i=void 0,c={id:"grouping/aggregation/min()",title:"min()",description:"df.groupby(column_name).min()",source:"@site/docs/grouping/aggregation/min().md",sourceDirName:"grouping/aggregation",slug:"/grouping/aggregation/min()",permalink:"/bpd-reference/docs/grouping/aggregation/min()",draft:!1,unlisted:!1,editUrl:"https://github.com/dsc-courses/bpd-reference/tree/main/docs/grouping/aggregation/min().md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"median()",permalink:"/bpd-reference/docs/grouping/aggregation/median()"},next:{title:"sum()",permalink:"/bpd-reference/docs/grouping/aggregation/sum()"}},d={},l=[];function g(e){const n={code:"code",hr:"hr",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("code",{children:"df.groupby(column_name).min()"}),"\n",(0,a.jsxs)("div",{className:"base",children:[(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Returns a DataFrame, with rows as groups, and each column as the min of the column values within each group."})}),(0,a.jsxs)("dl",{children:[(0,a.jsx)("dt",{className:"term",children:"Note:"}),(0,a.jsxs)("dd",{children:["Columns with String values display the minimum alphabetical starting character (ex. ",(0,a.jsx)("code",{children:'"black"'})," is alphabetically before ",(0,a.jsx)("code",{children:'"golden"'})," and ",(0,a.jsx)("code",{children:'"white"'}),")."]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"pets\n"})}),"\n",(0,a.jsx)(s.A,{data:'{"columns":["Species","Color","Weight","Age"],"index":[0,1,2,3,4,5,6],"data":[["dog","black",40.0,5.0],["cat","golden",15.0,8.0],["cat","black",20.0,9.0],["dog","white",80.0,2.0],["dog","black",25.0,0.5],["hamster","black",1.0,3.0],["hamster","golden",0.25,0.2]]}'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"pets.groupby('Species').min()\n"})}),"\n",(0,a.jsx)(s.A,{data:'{"columns":["ID","Color","Weight","Age","Is_Cat","Owner_Comment"],"index":["cat","dog","hamster"],"data":[["cat_001","black",1.5,0.0,true,"****All you need is love and a cat.****"],["dog_001","black",25.0,0.5,false,"      There are no bad dogs, only bad owners."],["ham_001","black",0.25,0.2,false,"No, thank you!"]]}'})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},8597:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var a=t(4848);const r=e=>{let{data:n}=e,t=[],r=[],s="",o=[];if(n){const e=JSON.parse(n);t=e.columns||[],r=e.data||[],s=e.indexName||"Index",o=e.index||[]}return(0,a.jsx)("div",{className:"dataframe-container",children:(0,a.jsxs)("table",{className:"dataframe-table",children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:s})," ",t.map(((e,n)=>(0,a.jsx)("th",{children:e},n)))]})}),(0,a.jsx)("tbody",{children:r.map(((e,n)=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{className:"index-value",children:o[n]})," ",e.map(((e,n)=>(0,a.jsx)("td",{children:"boolean"==typeof e?e.toString().charAt(0).toUpperCase()+e.toString().slice(1):e},n)))]},n)))})]})})}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);