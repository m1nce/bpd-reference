"use strict";(self.webpackChunkbpd_reference=self.webpackChunkbpd_reference||[]).push([[28],{8406:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=s(4848),i=s(8453),a=s(8597);const r={sidebar_position:8,sidebar_label:"Boostrapping",title:"Bootstrapping",tags:["querying","functions","for-loop","histogram"]},o=void 0,c={id:"statistical-inference/bootstrapping",title:"Bootstrapping",description:"Concept",source:"@site/docs/statistical-inference/bootstrapping.md",sourceDirName:"statistical-inference",slug:"/statistical-inference/bootstrapping",permalink:"/bpd-reference/docs/statistical-inference/bootstrapping",draft:!1,unlisted:!1,editUrl:"https://github.com/dsc-courses/bpd-reference/tree/main/docs/statistical-inference/bootstrapping.md",tags:[{label:"querying",permalink:"/bpd-reference/docs/tags/querying"},{label:"functions",permalink:"/bpd-reference/docs/tags/functions"},{label:"for-loop",permalink:"/bpd-reference/docs/tags/for-loop"},{label:"histogram",permalink:"/bpd-reference/docs/tags/histogram"}],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,sidebar_label:"Boostrapping",title:"Bootstrapping",tags:["querying","functions","for-loop","histogram"]},sidebar:"statsSidebar",previous:{title:"Standard Units, Correlation, Regression",permalink:"/bpd-reference/docs/statistical-inference/standard_units"},next:{title:"Hypothesis Test vs. Permutation Test",permalink:"/bpd-reference/docs/statistical-inference/concept check/hypothesis_vs_permutation"}},l={},d=[{value:"Concept",id:"concept",level:2},{value:"Code Example",id:"code-example",level:2},{value:"1. State the question/hypothesis",id:"1-state-the-questionhypothesis",level:3},{value:"2. Query the DataFrame",id:"2-query-the-dataframe",level:3},{value:"3. Create a function to calculate test statistic",id:"3-create-a-function-to-calculate-test-statistic",level:3},{value:"4. Simulate the permutation test",id:"4-simulate-the-permutation-test",level:3},{value:"5. Conclusion",id:"5-conclusion",level:3},{value:"6. Extra",id:"6-extra",level:3}];function h(e){const t={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",math:"math",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"concept",children:"Concept"}),"\n",(0,n.jsx)(t.admonition,{title:"Key Idea",type:"tip",children:(0,n.jsx)(t.p,{children:"We use a bootstrapping to estimate the distribution of the sample statistic to see how different our sample statistic could have been."})}),"\n",(0,n.jsxs)(t.admonition,{title:"Terminology",type:"info",children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Bootstrapping"}),": Bootstrapping is a type of hypothesis test that involves resampling from a single sample to estimate the\r\ndistribution of the sample statistic. It answers the question how different the sample statistic could have been if given a different sample. To conduct bootstrapping:"]}),(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Confidence Intervals:"})," A permutation test is a type of A/B test (and a type of hypothesis test). It tests whether two samples come from the same population distribution. To conduct a permutation test:"]})]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"When resampling, make sure that you do it with replacement."})}),"\n",(0,n.jsxs)(t.p,{children:["The diagram below provides an overview of conducting a permutation test, although it references a different dataset. ",(0,n.jsx)(t.a,{href:"https://www.jwilber.me/permutationtest/",children:"Here"})," is another useful visualization. For additional helpful visual guides, please visit the ",(0,n.jsx)(t.a,{href:"https://dsc10.com/diagrams/",children:"Diagrams"})," site."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"code-example",children:"Code Example"}),"\n",(0,n.jsx)(t.h3,{id:"1-state-the-questionhypothesis",children:"1. State the question/hypothesis"}),"\n",(0,n.jsxs)(t.admonition,{title:"Hypotheses",type:"info",children:[(0,n.jsx)(t.p,{children:"Our pair of hypotheses is:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Null Hypothesis:"})," The mean weights of dogs and cats are the ",(0,n.jsx)(t.em,{children:"same"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Alternative Hypothesis:"})," The mean weights of dogs and cats are ",(0,n.jsx)(t.em,{children:"different"}),"."]}),"\n"]})]}),"\n",(0,n.jsxs)(t.p,{children:['Since the alternative hypothesis is of the form "A and B are different," the ',(0,n.jsx)(t.strong,{children:"test statistic"})," should measure distance and use an absolute value."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.span,{className:"katex",children:[(0,n.jsx)(t.span,{className:"katex-mathml",children:(0,n.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(t.semantics,{children:[(0,n.jsx)(t.mrow,{children:(0,n.jsx)(t.mo,{children:"\u2234"})}),(0,n.jsx)(t.annotation,{encoding:"application/x-tex",children:"\\therefore"})]})})}),(0,n.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(t.span,{className:"base",children:[(0,n.jsx)(t.span,{className:"strut",style:{height:"0.6922em"}}),(0,n.jsx)(t.span,{className:"mrel amsrm",children:"\u2234"})]})})]})," Use ",(0,n.jsx)(t.strong,{children:"absolute difference in group means"})," as the test statistic."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"2-query-the-dataframe",children:"2. Query the DataFrame"}),"\n",(0,n.jsx)(t.p,{children:"Since we want to compare the distributions of only cats and dogs, we need to make sure to only include the relevant pieces of data (e.g., cats and dogs weights)."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"# Create a boolean Series that references which rows fulfill either condition.\r\nquerying_condition = (full_pets.get('Species') == 'dog') | (full_pets.get('Species') == 'cat')\r\n# Query.\r\ncats_dogs = full_pets[querying_condition]\r\n# Display the first 5 rows only.\r\ncats_dogs.take(np.arange(5)) \n"})}),"\n",(0,n.jsx)(a.A,{data:'{"columns":["ID","Species","Color","Weight","Age","Is_Cat","Owner_Comment"],"index":[0,1,2,3,4],"data":[["dog_001","dog","black",40.0,5.0,false,"      There are no bad dogs, only bad owners."],["cat_001","cat","golden",1.5,0.2,true,"My best birthday present ever!!!"],["cat_002","cat","black",15.0,9.0,true,"****All you need is love and a cat.****"],["dog_002","dog","white",80.0,2.0,false,"Love is a wet nose and a wagging tail."],["dog_003","dog","black",25.0,0.5,false,"Be the person your dog thinks you are."]]}'}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"3-create-a-function-to-calculate-test-statistic",children:"3. Create a function to calculate test statistic"}),"\n",(0,n.jsx)(t.p,{children:"Since our hypotheses depend on the test statistic, create a function to be able to calculate it during every trial of our permutation test."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def difference_in_means(cats_dogs):\r\n    \"\"\"\r\n    Calculate the absolute difference in the mean weight of dogs and cats.\r\n    ---\r\n    Input:\r\n      cats_dogs: a DataFrame containing the columns 'Species' and 'Weight'.\r\n    ---\r\n    Output:\r\n        The absolute difference in the mean weight of dogs and cats.\r\n    \"\"\"\r\n    means = cats_dogs.groupby('Species').mean()\r\n    return np.abs((means.get('Weight').loc['dog'] - means.get('Weight').loc['cat']))\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Note: Although we can simply do this in the for-loop shown in the next step, we can practice good coding habits by separating our code into readable bits!"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"4-simulate-the-permutation-test",children:"4. Simulate the permutation test"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"n = 500 # Number of simulations.\r\nstatistics = np.array([]) # Array to keep track of the difference in means for each iteration.\r\nfor i in np.arange(n): # Run the simulation `n` number of times\r\n    # 1. Shuffle the species.\r\n    shuffled = cats_dogs.assign(Species=np.random.permutation(cats_dogs.get('Species')))\r\n\r\n    # 2. Compute the test statistic.\r\n    statistic = difference_in_means(shuffled)\r\n\r\n    # 3. Save the result.\r\n    statistics = np.append(statistics, statistic)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This code will run the permutation test 500 times, but a different reasonable number can be used instead. It is ",(0,n.jsx)(t.strong,{children:"crucial"})," to keep track of the difference in means each time our for-loop runs so that the number of simulated values can be displayed."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"5-conclusion",children:"5. Conclusion"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'observed = difference_in_means(cats_dogs)\r\np_value = np.count_nonzero(statistics >= observed) / n\r\n\r\nprint("The observed value of the test statistic is:", observed)\r\nprint("The p-value is:", p_value)\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"The observed value of the test statistic is: 30.361111111111107"})," ",(0,n.jsx)("br",{}),"\r\n",(0,n.jsx)(t.strong,{children:"The p-value is: 0.004"})]}),"\n",(0,n.jsx)(t.p,{children:"Using a significance level of 0.05:"}),"\n",(0,n.jsx)(t.admonition,{title:"Conclusion",type:"info",children:(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Under the null hypothesis, we rarely see a difference greater than the observed value."}),"\n",(0,n.jsxs)(t.li,{children:["Therefore, we ",(0,n.jsx)(t.strong,{children:"reject"})," the null hypothesis: the evidence implies that the two groups do not come from the same distribution."]}),"\n",(0,n.jsx)(t.li,{children:"Still, we cannot conclude that species causes a different weight because there may be other confounding variables."}),"\n"]})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"6-extra",children:"6. Extra"}),"\n",(0,n.jsx)(t.p,{children:"Let's see how our observed statistic compares to the overall simulated values!"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"# Create the histogram.\r\nbpd.DataFrame().assign(statistics=statistics).plot(kind='hist', bins=20, density=True, ec='w')\r\n# Don't worry about this line - you won't need to know it for this course!\r\nplt.axvline(x=observed, c='black', linewidth=4, label='population difference in means')\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Distribution",src:s(6718).A+"",width:"576",height:"413"})}),"\n",(0,n.jsxs)(t.p,{children:["From this graph, we can tell that there is barely any data to the ",(0,n.jsx)(t.strong,{children:"right"})," of the black vertical line (our test statistic), meaning we have a very low p-value!"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8597:(e,t,s)=>{s.d(t,{A:()=>i});s(6540);var n=s(4848);const i=e=>{let{data:t}=e,s=[],i=[],a="",r=[];if(t){const e=JSON.parse(t);s=e.columns||[],i=e.data||[],a=e.indexName||"Index",r=e.index||[]}return(0,n.jsx)("div",{className:"dataframe-container",children:(0,n.jsxs)("table",{className:"dataframe-table",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:a}),s.map(((e,t)=>(0,n.jsx)("th",{children:e},t)))]})}),(0,n.jsx)("tbody",{children:i.map(((e,t)=>(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{className:"index-value",children:r[t]}),e.map(((e,t)=>{return(0,n.jsx)("td",{children:(s=e,"boolean"==typeof s?s.toString().charAt(0).toUpperCase()+s.toString().slice(1):s)},t);var s}))]},t)))})]})})}},6718:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/permutation-test-fae4df12733e667b05989b96bf08d9a9.png"},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(6540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);